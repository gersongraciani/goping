// Code generated by protoc-gen-go.
// source: goping.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	goping.proto

It has these top-level messages:
	IcmpMessage
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type IcmpMessage_Type int32

const (
	IcmpMessage_ECHO_REPLY              IcmpMessage_Type = 0
	IcmpMessage_DESTINATION_UNREACHABLE IcmpMessage_Type = 3
	IcmpMessage_REDIRECT_MESSAGE        IcmpMessage_Type = 5
	IcmpMessage_ECHO_REQUEST            IcmpMessage_Type = 8
	IcmpMessage_ROUTER_ADVERTISEMENT    IcmpMessage_Type = 9
	IcmpMessage_ROUTER_SOLICITATION     IcmpMessage_Type = 10
	IcmpMessage_TIME_EXCEEDED           IcmpMessage_Type = 11
	IcmpMessage_PARAMETER_PROBLEM       IcmpMessage_Type = 12
	IcmpMessage_TIMESTAMP               IcmpMessage_Type = 13
	IcmpMessage_TIMESTAMP_REPLY         IcmpMessage_Type = 14
)

var IcmpMessage_Type_name = map[int32]string{
	0:  "ECHO_REPLY",
	3:  "DESTINATION_UNREACHABLE",
	5:  "REDIRECT_MESSAGE",
	8:  "ECHO_REQUEST",
	9:  "ROUTER_ADVERTISEMENT",
	10: "ROUTER_SOLICITATION",
	11: "TIME_EXCEEDED",
	12: "PARAMETER_PROBLEM",
	13: "TIMESTAMP",
	14: "TIMESTAMP_REPLY",
}
var IcmpMessage_Type_value = map[string]int32{
	"ECHO_REPLY":              0,
	"DESTINATION_UNREACHABLE": 3,
	"REDIRECT_MESSAGE":        5,
	"ECHO_REQUEST":            8,
	"ROUTER_ADVERTISEMENT":    9,
	"ROUTER_SOLICITATION":     10,
	"TIME_EXCEEDED":           11,
	"PARAMETER_PROBLEM":       12,
	"TIMESTAMP":               13,
	"TIMESTAMP_REPLY":         14,
}

func (x IcmpMessage_Type) String() string {
	return proto.EnumName(IcmpMessage_Type_name, int32(x))
}
func (IcmpMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type IcmpMessage_SingleCode int32

const (
	IcmpMessage_ZERO_CODE IcmpMessage_SingleCode = 0
)

var IcmpMessage_SingleCode_name = map[int32]string{
	0: "ZERO_CODE",
}
var IcmpMessage_SingleCode_value = map[string]int32{
	"ZERO_CODE": 0,
}

func (x IcmpMessage_SingleCode) String() string {
	return proto.EnumName(IcmpMessage_SingleCode_name, int32(x))
}
func (IcmpMessage_SingleCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type IcmpMessage_DestinationUnreachableCode int32

const (
	IcmpMessage_NETWORK_UNREACHABLE                       IcmpMessage_DestinationUnreachableCode = 0
	IcmpMessage_HOST_UNREACHABLE                          IcmpMessage_DestinationUnreachableCode = 1
	IcmpMessage_PROTOCOL_UNREACHABLE                      IcmpMessage_DestinationUnreachableCode = 2
	IcmpMessage_PORT_UNREACHABLE                          IcmpMessage_DestinationUnreachableCode = 3
	IcmpMessage_FRAGMENTATION_REQUIRED                    IcmpMessage_DestinationUnreachableCode = 4
	IcmpMessage_SOURCE_ROUTE_FAILED                       IcmpMessage_DestinationUnreachableCode = 5
	IcmpMessage_DESTINATION_NETWORK_UNKNOWN               IcmpMessage_DestinationUnreachableCode = 6
	IcmpMessage_DESTINATION_HOST_UNKNOWN                  IcmpMessage_DestinationUnreachableCode = 7
	IcmpMessage_SOURCE_HOST_ISOLATED                      IcmpMessage_DestinationUnreachableCode = 8
	IcmpMessage_NETWORK_ADMINISTRATIVELY_PROHIBITED       IcmpMessage_DestinationUnreachableCode = 9
	IcmpMessage_HOST_ADMINISTRATIVELY_PROHIBITED          IcmpMessage_DestinationUnreachableCode = 10
	IcmpMessage_NETWORK_UNREACHABLE_TOS                   IcmpMessage_DestinationUnreachableCode = 11
	IcmpMessage_HOST_UNREACHABLE_TOS                      IcmpMessage_DestinationUnreachableCode = 12
	IcmpMessage_COMMUNICATION_ADMINISTRATIVELY_PROHIBITED IcmpMessage_DestinationUnreachableCode = 13
	IcmpMessage_HOST_PRECEDENCE_VIOLATION                 IcmpMessage_DestinationUnreachableCode = 14
	IcmpMessage_PRECEDENCE_CUTOFF_IN_EFFECT               IcmpMessage_DestinationUnreachableCode = 15
)

var IcmpMessage_DestinationUnreachableCode_name = map[int32]string{
	0:  "NETWORK_UNREACHABLE",
	1:  "HOST_UNREACHABLE",
	2:  "PROTOCOL_UNREACHABLE",
	3:  "PORT_UNREACHABLE",
	4:  "FRAGMENTATION_REQUIRED",
	5:  "SOURCE_ROUTE_FAILED",
	6:  "DESTINATION_NETWORK_UNKNOWN",
	7:  "DESTINATION_HOST_UNKNOWN",
	8:  "SOURCE_HOST_ISOLATED",
	9:  "NETWORK_ADMINISTRATIVELY_PROHIBITED",
	10: "HOST_ADMINISTRATIVELY_PROHIBITED",
	11: "NETWORK_UNREACHABLE_TOS",
	12: "HOST_UNREACHABLE_TOS",
	13: "COMMUNICATION_ADMINISTRATIVELY_PROHIBITED",
	14: "HOST_PRECEDENCE_VIOLATION",
	15: "PRECEDENCE_CUTOFF_IN_EFFECT",
}
var IcmpMessage_DestinationUnreachableCode_value = map[string]int32{
	"NETWORK_UNREACHABLE":                       0,
	"HOST_UNREACHABLE":                          1,
	"PROTOCOL_UNREACHABLE":                      2,
	"PORT_UNREACHABLE":                          3,
	"FRAGMENTATION_REQUIRED":                    4,
	"SOURCE_ROUTE_FAILED":                       5,
	"DESTINATION_NETWORK_UNKNOWN":               6,
	"DESTINATION_HOST_UNKNOWN":                  7,
	"SOURCE_HOST_ISOLATED":                      8,
	"NETWORK_ADMINISTRATIVELY_PROHIBITED":       9,
	"HOST_ADMINISTRATIVELY_PROHIBITED":          10,
	"NETWORK_UNREACHABLE_TOS":                   11,
	"HOST_UNREACHABLE_TOS":                      12,
	"COMMUNICATION_ADMINISTRATIVELY_PROHIBITED": 13,
	"HOST_PRECEDENCE_VIOLATION":                 14,
	"PRECEDENCE_CUTOFF_IN_EFFECT":               15,
}

func (x IcmpMessage_DestinationUnreachableCode) String() string {
	return proto.EnumName(IcmpMessage_DestinationUnreachableCode_name, int32(x))
}
func (IcmpMessage_DestinationUnreachableCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 2}
}

type IcmpMessage_RedirectMessageCode int32

const (
	IcmpMessage_REDIRECT_DATAGRAM_FOR_NETWORK     IcmpMessage_RedirectMessageCode = 0
	IcmpMessage_REDIRECT_DATAGRAM_FOR_HOST        IcmpMessage_RedirectMessageCode = 1
	IcmpMessage_REDIRECT_DATAGRAM_FOR_TOS_NETWORK IcmpMessage_RedirectMessageCode = 2
	IcmpMessage_REDIRECT_DATAGRAM_FOR_TOS_HOST    IcmpMessage_RedirectMessageCode = 3
)

var IcmpMessage_RedirectMessageCode_name = map[int32]string{
	0: "REDIRECT_DATAGRAM_FOR_NETWORK",
	1: "REDIRECT_DATAGRAM_FOR_HOST",
	2: "REDIRECT_DATAGRAM_FOR_TOS_NETWORK",
	3: "REDIRECT_DATAGRAM_FOR_TOS_HOST",
}
var IcmpMessage_RedirectMessageCode_value = map[string]int32{
	"REDIRECT_DATAGRAM_FOR_NETWORK":     0,
	"REDIRECT_DATAGRAM_FOR_HOST":        1,
	"REDIRECT_DATAGRAM_FOR_TOS_NETWORK": 2,
	"REDIRECT_DATAGRAM_FOR_TOS_HOST":    3,
}

func (x IcmpMessage_RedirectMessageCode) String() string {
	return proto.EnumName(IcmpMessage_RedirectMessageCode_name, int32(x))
}
func (IcmpMessage_RedirectMessageCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 3}
}

type IcmpMessage_TimeExceededCode int32

const (
	IcmpMessage_TTL_EXPIRED_IN_TRANSIT            IcmpMessage_TimeExceededCode = 0
	IcmpMessage_FRAGMENT_REASSEMBLY_TIME_EXCEEDED IcmpMessage_TimeExceededCode = 1
)

var IcmpMessage_TimeExceededCode_name = map[int32]string{
	0: "TTL_EXPIRED_IN_TRANSIT",
	1: "FRAGMENT_REASSEMBLY_TIME_EXCEEDED",
}
var IcmpMessage_TimeExceededCode_value = map[string]int32{
	"TTL_EXPIRED_IN_TRANSIT":            0,
	"FRAGMENT_REASSEMBLY_TIME_EXCEEDED": 1,
}

func (x IcmpMessage_TimeExceededCode) String() string {
	return proto.EnumName(IcmpMessage_TimeExceededCode_name, int32(x))
}
func (IcmpMessage_TimeExceededCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 4}
}

type IcmpMessage_ParameterProblemCode int32

const (
	IcmpMessage_POINTER_INDICATES_THE_ERROR IcmpMessage_ParameterProblemCode = 0
	IcmpMessage_MISSING_REQUIRED_OPTION     IcmpMessage_ParameterProblemCode = 1
	IcmpMessage_BAD_LENGTH                  IcmpMessage_ParameterProblemCode = 2
)

var IcmpMessage_ParameterProblemCode_name = map[int32]string{
	0: "POINTER_INDICATES_THE_ERROR",
	1: "MISSING_REQUIRED_OPTION",
	2: "BAD_LENGTH",
}
var IcmpMessage_ParameterProblemCode_value = map[string]int32{
	"POINTER_INDICATES_THE_ERROR": 0,
	"MISSING_REQUIRED_OPTION":     1,
	"BAD_LENGTH":                  2,
}

func (x IcmpMessage_ParameterProblemCode) String() string {
	return proto.EnumName(IcmpMessage_ParameterProblemCode_name, int32(x))
}
func (IcmpMessage_ParameterProblemCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 5}
}

type IcmpMessage struct {
	Type IcmpMessage_Type `protobuf:"varint,1,opt,name=type,enum=protocol.IcmpMessage_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Code:
	//	*IcmpMessage_SingleCode_
	//	*IcmpMessage_DestinationUnreachableCode_
	//	*IcmpMessage_RedirectMessageCode_
	//	*IcmpMessage_TimeExceededCode_
	//	*IcmpMessage_ParameterProblemCode_
	Code       isIcmpMessage_Code `protobuf_oneof:"code"`
	Identifier uint32             `protobuf:"varint,7,opt,name=identifier" json:"identifier,omitempty"`
	Sequence   uint32             `protobuf:"varint,8,opt,name=sequence" json:"sequence,omitempty"`
	Payload    []byte             `protobuf:"bytes,9,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *IcmpMessage) Reset()                    { *m = IcmpMessage{} }
func (m *IcmpMessage) String() string            { return proto.CompactTextString(m) }
func (*IcmpMessage) ProtoMessage()               {}
func (*IcmpMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isIcmpMessage_Code interface {
	isIcmpMessage_Code()
}

type IcmpMessage_SingleCode_ struct {
	SingleCode IcmpMessage_SingleCode `protobuf:"varint,2,opt,name=singleCode,enum=protocol.IcmpMessage_SingleCode,oneof"`
}
type IcmpMessage_DestinationUnreachableCode_ struct {
	DestinationUnreachableCode IcmpMessage_DestinationUnreachableCode `protobuf:"varint,3,opt,name=destinationUnreachableCode,enum=protocol.IcmpMessage_DestinationUnreachableCode,oneof"`
}
type IcmpMessage_RedirectMessageCode_ struct {
	RedirectMessageCode IcmpMessage_RedirectMessageCode `protobuf:"varint,4,opt,name=redirectMessageCode,enum=protocol.IcmpMessage_RedirectMessageCode,oneof"`
}
type IcmpMessage_TimeExceededCode_ struct {
	TimeExceededCode IcmpMessage_TimeExceededCode `protobuf:"varint,5,opt,name=timeExceededCode,enum=protocol.IcmpMessage_TimeExceededCode,oneof"`
}
type IcmpMessage_ParameterProblemCode_ struct {
	ParameterProblemCode IcmpMessage_ParameterProblemCode `protobuf:"varint,6,opt,name=parameterProblemCode,enum=protocol.IcmpMessage_ParameterProblemCode,oneof"`
}

func (*IcmpMessage_SingleCode_) isIcmpMessage_Code()                 {}
func (*IcmpMessage_DestinationUnreachableCode_) isIcmpMessage_Code() {}
func (*IcmpMessage_RedirectMessageCode_) isIcmpMessage_Code()        {}
func (*IcmpMessage_TimeExceededCode_) isIcmpMessage_Code()           {}
func (*IcmpMessage_ParameterProblemCode_) isIcmpMessage_Code()       {}

func (m *IcmpMessage) GetCode() isIcmpMessage_Code {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *IcmpMessage) GetSingleCode() IcmpMessage_SingleCode {
	if x, ok := m.GetCode().(*IcmpMessage_SingleCode_); ok {
		return x.SingleCode
	}
	return IcmpMessage_ZERO_CODE
}

func (m *IcmpMessage) GetDestinationUnreachableCode() IcmpMessage_DestinationUnreachableCode {
	if x, ok := m.GetCode().(*IcmpMessage_DestinationUnreachableCode_); ok {
		return x.DestinationUnreachableCode
	}
	return IcmpMessage_NETWORK_UNREACHABLE
}

func (m *IcmpMessage) GetRedirectMessageCode() IcmpMessage_RedirectMessageCode {
	if x, ok := m.GetCode().(*IcmpMessage_RedirectMessageCode_); ok {
		return x.RedirectMessageCode
	}
	return IcmpMessage_REDIRECT_DATAGRAM_FOR_NETWORK
}

func (m *IcmpMessage) GetTimeExceededCode() IcmpMessage_TimeExceededCode {
	if x, ok := m.GetCode().(*IcmpMessage_TimeExceededCode_); ok {
		return x.TimeExceededCode
	}
	return IcmpMessage_TTL_EXPIRED_IN_TRANSIT
}

func (m *IcmpMessage) GetParameterProblemCode() IcmpMessage_ParameterProblemCode {
	if x, ok := m.GetCode().(*IcmpMessage_ParameterProblemCode_); ok {
		return x.ParameterProblemCode
	}
	return IcmpMessage_POINTER_INDICATES_THE_ERROR
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IcmpMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IcmpMessage_OneofMarshaler, _IcmpMessage_OneofUnmarshaler, _IcmpMessage_OneofSizer, []interface{}{
		(*IcmpMessage_SingleCode_)(nil),
		(*IcmpMessage_DestinationUnreachableCode_)(nil),
		(*IcmpMessage_RedirectMessageCode_)(nil),
		(*IcmpMessage_TimeExceededCode_)(nil),
		(*IcmpMessage_ParameterProblemCode_)(nil),
	}
}

func _IcmpMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IcmpMessage)
	// code
	switch x := m.Code.(type) {
	case *IcmpMessage_SingleCode_:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.SingleCode))
	case *IcmpMessage_DestinationUnreachableCode_:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.DestinationUnreachableCode))
	case *IcmpMessage_RedirectMessageCode_:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.RedirectMessageCode))
	case *IcmpMessage_TimeExceededCode_:
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TimeExceededCode))
	case *IcmpMessage_ParameterProblemCode_:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ParameterProblemCode))
	case nil:
	default:
		return fmt.Errorf("IcmpMessage.Code has unexpected type %T", x)
	}
	return nil
}

func _IcmpMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IcmpMessage)
	switch tag {
	case 2: // code.singleCode
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Code = &IcmpMessage_SingleCode_{IcmpMessage_SingleCode(x)}
		return true, err
	case 3: // code.destinationUnreachableCode
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Code = &IcmpMessage_DestinationUnreachableCode_{IcmpMessage_DestinationUnreachableCode(x)}
		return true, err
	case 4: // code.redirectMessageCode
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Code = &IcmpMessage_RedirectMessageCode_{IcmpMessage_RedirectMessageCode(x)}
		return true, err
	case 5: // code.timeExceededCode
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Code = &IcmpMessage_TimeExceededCode_{IcmpMessage_TimeExceededCode(x)}
		return true, err
	case 6: // code.parameterProblemCode
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Code = &IcmpMessage_ParameterProblemCode_{IcmpMessage_ParameterProblemCode(x)}
		return true, err
	default:
		return false, nil
	}
}

func _IcmpMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IcmpMessage)
	// code
	switch x := m.Code.(type) {
	case *IcmpMessage_SingleCode_:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.SingleCode))
	case *IcmpMessage_DestinationUnreachableCode_:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.DestinationUnreachableCode))
	case *IcmpMessage_RedirectMessageCode_:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.RedirectMessageCode))
	case *IcmpMessage_TimeExceededCode_:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TimeExceededCode))
	case *IcmpMessage_ParameterProblemCode_:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ParameterProblemCode))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*IcmpMessage)(nil), "protocol.IcmpMessage")
	proto.RegisterEnum("protocol.IcmpMessage_Type", IcmpMessage_Type_name, IcmpMessage_Type_value)
	proto.RegisterEnum("protocol.IcmpMessage_SingleCode", IcmpMessage_SingleCode_name, IcmpMessage_SingleCode_value)
	proto.RegisterEnum("protocol.IcmpMessage_DestinationUnreachableCode", IcmpMessage_DestinationUnreachableCode_name, IcmpMessage_DestinationUnreachableCode_value)
	proto.RegisterEnum("protocol.IcmpMessage_RedirectMessageCode", IcmpMessage_RedirectMessageCode_name, IcmpMessage_RedirectMessageCode_value)
	proto.RegisterEnum("protocol.IcmpMessage_TimeExceededCode", IcmpMessage_TimeExceededCode_name, IcmpMessage_TimeExceededCode_value)
	proto.RegisterEnum("protocol.IcmpMessage_ParameterProblemCode", IcmpMessage_ParameterProblemCode_name, IcmpMessage_ParameterProblemCode_value)
}

var fileDescriptor0 = []byte{
	// 851 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x94, 0xff, 0x72, 0x1a, 0x37,
	0x10, 0xc7, 0x8d, 0x8d, 0x6d, 0xbc, 0x01, 0x47, 0x91, 0xdd, 0x86, 0xe2, 0xc6, 0x75, 0xe8, 0xcf,
	0x74, 0xa6, 0x4c, 0xa7, 0x7d, 0x82, 0xe3, 0x4e, 0x80, 0x26, 0x9c, 0x74, 0x95, 0x84, 0xd3, 0x74,
	0xa6, 0x73, 0x25, 0xa0, 0xba, 0xcc, 0xd8, 0x40, 0x8f, 0xeb, 0x4c, 0xf3, 0x3c, 0x7d, 0x9b, 0x3e,
	0x43, 0x9f, 0xa5, 0x93, 0x95, 0x0c, 0x04, 0x3b, 0x87, 0xff, 0x62, 0x8e, 0xdd, 0xfd, 0xec, 0xee,
	0x57, 0x5f, 0x09, 0xaa, 0x57, 0xb3, 0xf9, 0x64, 0x7a, 0xd5, 0x9a, 0x67, 0xb3, 0x7c, 0x46, 0x2b,
	0xfe, 0x67, 0x34, 0xbb, 0x6e, 0xfe, 0x5b, 0x83, 0x47, 0x7c, 0x74, 0x33, 0x8f, 0xed, 0x62, 0x31,
	0xbc, 0xb2, 0xb4, 0x05, 0xe5, 0xfc, 0xed, 0xdc, 0xd6, 0x4b, 0x17, 0xa5, 0x6f, 0x8e, 0x7f, 0x68,
	0xb4, 0x56, 0x89, 0xad, 0x8d, 0xa4, 0x96, 0xc1, 0x0c, 0xe5, 0xf3, 0x68, 0x1b, 0x60, 0x81, 0xdc,
	0x6b, 0x1b, 0xce, 0xc6, 0xb6, 0xbe, 0xeb, 0xab, 0x2e, 0x8a, 0xab, 0xf4, 0x3a, 0xaf, 0xb7, 0xa3,
	0x36, 0xaa, 0x68, 0x06, 0x8d, 0xb1, 0x5d, 0xe4, 0x93, 0xe9, 0x30, 0x9f, 0xcc, 0xa6, 0x83, 0x69,
	0x66, 0x87, 0xa3, 0x3f, 0x86, 0x6f, 0x96, 0xcc, 0x3d, 0xcf, 0xfc, 0xbe, 0x98, 0x19, 0x6d, 0xad,
	0xc3, 0x1e, 0x0f, 0x50, 0xe9, 0xaf, 0x70, 0x92, 0xd9, 0xf1, 0x24, 0xb3, 0xa3, 0x7c, 0xc9, 0xf2,
	0xcd, 0xca, 0xbe, 0xd9, 0x8b, 0xe2, 0x66, 0xea, 0xc3, 0x02, 0xec, 0x52, 0xc4, 0xa1, 0x06, 0x48,
	0x3e, 0xb9, 0xb1, 0xec, 0xef, 0x91, 0xb5, 0x63, 0x3b, 0xf6, 0xec, 0x7d, 0xcf, 0xfe, 0x6a, 0x8b,
	0xa4, 0xf7, 0xb2, 0x11, 0xfc, 0x01, 0x81, 0xfe, 0x06, 0xa7, 0xf3, 0x61, 0x36, 0xbc, 0xb1, 0xb9,
	0xcd, 0x92, 0x6c, 0x86, 0xbb, 0xdc, 0x78, 0xf2, 0x81, 0x27, 0x7f, 0x5b, 0x4c, 0x4e, 0x0a, 0x2a,
	0x90, 0x5e, 0x48, 0xa2, 0xe7, 0x00, 0x93, 0xb1, 0x9d, 0xe6, 0x93, 0xdf, 0x27, 0x36, 0xab, 0x1f,
	0x22, 0xb7, 0xa6, 0x36, 0xfe, 0xa1, 0x0d, 0xa8, 0x2c, 0xec, 0x9f, 0x7f, 0xd9, 0xe9, 0xc8, 0xd6,
	0x2b, 0x3e, 0xba, 0xfe, 0xa6, 0x75, 0x38, 0x9c, 0x0f, 0xdf, 0x5e, 0xcf, 0x86, 0xe3, 0xfa, 0x11,
	0x86, 0xaa, 0x6a, 0xf5, 0xd9, 0xfc, 0xaf, 0x04, 0x65, 0xe7, 0x19, 0x7a, 0x0c, 0xc0, 0xc2, 0x9e,
	0x4c, 0x15, 0x4b, 0xfa, 0xaf, 0xc9, 0x0e, 0x3d, 0x83, 0xa7, 0x11, 0xd3, 0x86, 0x8b, 0xc0, 0x70,
	0x29, 0xd2, 0x81, 0x50, 0x2c, 0x08, 0x7b, 0x41, 0xbb, 0xcf, 0xc8, 0x1e, 0x3d, 0x05, 0xa2, 0x58,
	0xc4, 0x15, 0x0b, 0x4d, 0x1a, 0x33, 0xad, 0x83, 0x2e, 0x23, 0xfb, 0x94, 0x40, 0x75, 0x89, 0xf8,
	0x69, 0x80, 0xa5, 0xa4, 0x82, 0x7d, 0x4f, 0x95, 0x1c, 0x18, 0xa6, 0xd2, 0x20, 0xba, 0x64, 0xca,
	0x70, 0xcd, 0x62, 0x26, 0x0c, 0x39, 0xa2, 0x4f, 0xe1, 0x64, 0x19, 0xd1, 0xb2, 0xcf, 0x43, 0x6e,
	0x7c, 0x1b, 0x02, 0xf4, 0x09, 0xd4, 0x0c, 0x8f, 0x59, 0xca, 0x7e, 0x0e, 0x19, 0x8b, 0x58, 0x44,
	0x1e, 0xd1, 0x8f, 0xe0, 0x49, 0x12, 0xa8, 0x20, 0x66, 0x2e, 0x3d, 0x51, 0x12, 0x67, 0x88, 0x49,
	0x95, 0xd6, 0xe0, 0xc8, 0x65, 0x6a, 0x13, 0xc4, 0x09, 0xa9, 0xd1, 0x13, 0x78, 0xbc, 0xfe, 0x5c,
	0x6e, 0x71, 0xdc, 0x3c, 0x03, 0x78, 0xef, 0x6d, 0x57, 0xf1, 0x0b, 0x53, 0x32, 0x0d, 0x65, 0xc4,
	0xc8, 0x4e, 0xf3, 0xff, 0x3d, 0x68, 0x6c, 0x77, 0xa9, 0x1b, 0x51, 0x30, 0xf3, 0x4a, 0xaa, 0x97,
	0x77, 0xb6, 0xdf, 0x71, 0xdb, 0xf7, 0xa4, 0x36, 0x77, 0xfe, 0x2d, 0xb9, 0x5d, 0x71, 0x36, 0x23,
	0x43, 0xd9, 0xbf, 0x13, 0xd9, 0x75, 0xf9, 0x89, 0x54, 0xe6, 0x9e, 0x86, 0x0d, 0xf8, 0xb8, 0xa3,
	0x82, 0xae, 0xd3, 0xe3, 0x56, 0x62, 0x27, 0x1b, 0x4a, 0x1a, 0x91, 0xb2, 0x6b, 0xad, 0xe5, 0x40,
	0x85, 0x2c, 0xf5, 0x22, 0xa5, 0x9d, 0x80, 0xf7, 0x31, 0xb0, 0x4f, 0x3f, 0x83, 0xb3, 0xcd, 0x53,
	0x79, 0x3f, 0xdf, 0x4b, 0x21, 0x5f, 0x09, 0x72, 0x40, 0x3f, 0x85, 0xfa, 0x66, 0xc2, 0x72, 0xce,
	0xdb, 0xe8, 0xa1, 0x9b, 0x71, 0xc9, 0xf5, 0x01, 0x8e, 0xda, 0x07, 0x06, 0xc1, 0x15, 0xfa, 0x35,
	0x7c, 0xbe, 0x82, 0x05, 0x51, 0xcc, 0x05, 0xd7, 0x46, 0x21, 0xe2, 0x92, 0xf5, 0x5f, 0x3b, 0xc9,
	0x7b, 0xbc, 0xcd, 0x5d, 0xe2, 0x11, 0xfd, 0x02, 0x2e, 0x7c, 0xed, 0x43, 0x59, 0xe0, 0xdc, 0x53,
	0xa0, 0x5d, 0x6a, 0xa4, 0xc6, 0xf3, 0xc4, 0x29, 0xee, 0xeb, 0xe7, 0x23, 0x55, 0xfa, 0x1d, 0xbc,
	0x08, 0x65, 0x1c, 0x0f, 0x04, 0x0f, 0x6f, 0xe7, 0x7f, 0xa8, 0x4b, 0x8d, 0x3e, 0x83, 0x4f, 0x3c,
	0x28, 0x41, 0x23, 0xa2, 0x57, 0x04, 0xee, 0x75, 0xc9, 0xdd, 0x4a, 0xce, 0x4a, 0xc7, 0x4e, 0xac,
	0x8d, 0x48, 0x38, 0x30, 0xb2, 0xd3, 0x49, 0xb9, 0x48, 0x59, 0xa7, 0x83, 0xc6, 0x25, 0x8f, 0x9b,
	0xff, 0x94, 0xd0, 0x85, 0x05, 0x4f, 0xc4, 0x73, 0x78, 0xb6, 0xb6, 0x77, 0x14, 0x98, 0xa0, 0x8b,
	0xe6, 0x4b, 0x3b, 0x52, 0xad, 0xf4, 0x46, 0x0f, 0x9c, 0x43, 0xa3, 0x38, 0xc5, 0x0d, 0x84, 0x6e,
	0xf8, 0x12, 0x9e, 0x17, 0xc7, 0x71, 0xd1, 0x35, 0x66, 0x97, 0x36, 0xe1, 0x7c, 0x7b, 0x9a, 0x47,
	0xed, 0x35, 0x07, 0x40, 0xee, 0x3f, 0x41, 0xce, 0x3c, 0xc6, 0xf4, 0xf1, 0x92, 0x24, 0xce, 0x31,
	0x6e, 0x29, 0x94, 0x48, 0x68, 0x6e, 0x70, 0x34, 0x6c, 0xbd, 0x32, 0x16, 0x7a, 0x2a, 0xd0, 0x78,
	0xe7, 0xda, 0xa8, 0xdc, 0xdd, 0x5b, 0x55, 0x6a, 0x8e, 0xd1, 0xaf, 0x45, 0xef, 0x8c, 0x53, 0x4d,
	0x72, 0xe1, 0xee, 0x1a, 0x17, 0x91, 0x3b, 0x08, 0xa6, 0x53, 0xd3, 0xc3, 0x5a, 0xa5, 0xa4, 0xba,
	0x7d, 0x19, 0x62, 0xae, 0x35, 0x17, 0xdd, 0xb5, 0x65, 0x53, 0x99, 0x78, 0xcd, 0x4b, 0xee, 0x19,
	0x69, 0x07, 0x51, 0xda, 0x67, 0xa2, 0x6b, 0x7a, 0x64, 0xb7, 0x7d, 0x00, 0xe5, 0x11, 0x52, 0xdf,
	0x1c, 0xf8, 0x07, 0xf0, 0xc7, 0x77, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xb4, 0x3a, 0x7b, 0xed,
	0x06, 0x00, 0x00,
}
